basePath: /v1
definitions:
  controllers.CreateUserDTO:
    properties:
      birthdate:
        example: "2006-01-02T15:04:05Z"
        type: string
      description:
        type: string
      gender:
        example: Male
        type: string
      name:
        type: string
      profilePictureUrl:
        type: string
      role:
        example: User
        type: string
      shortDescription:
        type: string
    required:
    - name
    type: object
  models.APIError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  models.User:
    properties:
      accessToken:
        type: string
      birthdate:
        example: "2006-01-02T15:04:05Z"
        type: string
      description:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
      profilePictureUrl:
        type: string
      role:
        example: User
        type: string
      shortDescription:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: jonathangzzben@gmail.com
    name: JonathanGzzBen
    url: http://www.github.com/JonathanGzzBen
  description: This is Ingenialist's API
  license:
    name: MIT License
    url: https://mit-license.org/
  title: Ingenialists API V1
  version: 0.1.0
paths:
  /auth:
    get:
      operationId: GetCurrentUser
      responses:
        "200":
          description: OK
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - AccessToken: []
      tags:
      - auth
  /users:
    get:
      description: Get all registered users.
      operationId: GetAllUsers
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get all users
      tags:
      - users
    post:
      description: Creates a new user.
      operationId: CreateUser
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateUserDTO'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Create user
      tags:
      - users
  /users/{id}:
    get:
      description: Get user with matching ID.
      operationId: GetUser
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Get user
      tags:
      - users
securityDefinitions:
  AccessToken:
    in: header
    name: AccessToken
    type: apiKey
  OAuth2AccessCode:
    authorizationUrl: /v1/auth/google-login
    flow: accessCode
    scopes:
      email: ' Grant access to email'
      openid: ' Allow identifying account'
      profile: ' Grant access to profile'
    tokenUrl: /v1/auth/google-callback
    type: oauth2
swagger: "2.0"
